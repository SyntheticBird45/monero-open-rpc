{
	"openrpc": "1.2.6",
	"info": {
		"title": "Monero Daemon RPC",
		"description": "JSON-RPC API for interacting with monero daemon (Actual RPC standard is based on monerod)",
		"license": {
			"name": "MIT License",
			"url": "https://opensource.org/licenses/mit-license.php"
		},
		"version": "v1.4.5.0"
	},
	"externalDocs": {
		"description": "Official Documentation",
		"url": "https://github.com/monero-project/monero/blob/master/doc/rpc_api.md#daemon-rpc-calls"
	},
	"servers": [
		{
			"url": "http:\/\/{host}:{port}\/json_rpc",
			"name": "Monero daemon address",
			"summary": "Address of the monero daemon to interact with"
		}
	],
	"components": {
		"schemas": {
			"GetInfoResponse": {
				"type": "object",
				"properties": {
					"blockchainHeight": {
						"type": "integer",
						"description": "The current height of the blockchain."
					},
					"topBlockHash": {
						"type": "string",
						"format": "hex",
						"description": "The hash of the top block in the blockchain."
					}
				}
			},
			"GetBlockCountResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"description": "Number of blocks in longest chain seen by the node."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. 'OK' means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetBlockTemplateResponse": {
				"type": "object",
				"properties": {
					"blocktemplate_blob": {
						"type": "string",
						"description": "Blob on which to try to mine a new block."
					},
					"blockhashing_blob": {
						"type": "string",
						"description": "Blob on which to try to find a valid nonce."
					},
					"difficulty": {
						"type": "integer",
						"description": "Least-significant 64 bits of the 128-bit network difficulty."
					},
					"difficulty_top64": {
						"type": "integer",
						"description": "Most-significant 64 bits of the 128-bit network difficulty."
					},
					"expected_reward": {
						"type": "integer",
						"description": "Coinbase reward expected to be received if block is successfully mined."
					},
					"height": {
						"type": "integer",
						"description": "Height on which to mine."
					},
					"next_seed_hash": {
						"type": "string",
						"description": "Hash of the next block to use as seed for Random-X proof-of-work."
					},
					"prev_hash": {
						"type": "string",
						"description": "Hash of the most recent block on which to mine the next block."
					},
					"reserved_offset": {
						"type": "integer",
						"description": "Reserved offset."
					},
					"seed_hash": {
						"type": "string",
						"description": "Hash of block to use as seed for Random-X proof-of-work."
					},
					"seed_height": {
						"type": "integer",
						"description": "Height of block to use as seed for Random-X proof-of-work."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. 'OK' means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced and thus handles the RPC locally (false)"
					},
					"wide_difficulty": {
						"type": "string",
						"description": "Network difficulty (analogous to the strength of the network) as a hexadecimal string representing a 128-bit number."
					}
				}
			},
			"GenerateBlocksResponse": {
				"type": "object",
				"properties": {
					"blocks": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "List of block hashes."
					},
					"height": {
						"type": "integer",
						"description": "Height of the most recent block."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. 'OK' means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"BlockHeader": {
				"type": "object",
				"description": "A structure containing block header information.",
				"properties": {
					"block_size": {
						"type": "integer",
						"minimum": 0,
						"description": "Backward compatibility, same as `block_weight`, use that instead",
						"deprecated": true
					},
					"block_weight": {
						"type": "integer",
						"minimum": 0,
						"description": "The adjusted block size, in bytes. This is the raw size, plus a positive adjustment for any Bulletproof transactions with more than 2 outputs."
					},
					"cumulative_difficulty": {
						"type": "integer",
						"minimum": 0,
						"description": "Least-significant 64 bits of the cumulative difficulty of all blocks up to the block in the reply."
					},
					"cumulative_difficulty_top64": {
						"type": "integer",
						"minimum": 0,
						"description": "Most-significant 64 bits of the 128-bit cumulative difficulty."
					},
					"depth": {
						"type": "integer",
						"minimum": 0,
						"description": "The number of blocks succeeding this block on the blockchain. A larger number means an older block."
					},
					"difficulty": {
						"type": "integer",
						"minimum": 0,
						"description": "The strength of the Monero network based on mining power."
					},
					"difficulty_top64": {
						"type": "integer",
						"minimum": 0,
						"description": "Most-significant 64 bits of the 128-bit network difficulty."
					},
					"hash": {
						"type": "string",
						"description": "The hash of this block."
					},
					"height": {
						"type": "integer",
						"minimum": 0,
						"description": "The number of blocks preceding this block on the blockchain."
					},
					"long_term_weight": {
						"type": "integer",
						"minimum": 0,
						"description": "The long term block weight, based on the median weight of the preceding 100000 blocks."
					},
					"major_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The major version of the monero protocol at this block height."
					},
					"miner_tx_hash": {
						"type": "string",
						"description": "The hash of this block's coinbase transaction."
					},
					"minor_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The minor version of the monero protocol at this block height."
					},
					"nonce": {
						"type": "integer",
						"minimum": 0,
						"description": "A cryptographic random one-time number used in mining a Monero block"
					},
					"num_txes": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of transactions in the block, excluding the coinbase tx."
					},
					"orphan_status": {
						"type": "boolean",
						"description": "Usually `false`. If `true`, this block is not part of the longest chain."
					},
					"pow_hash": {
						"type": "string",
						"description": "The hash, as a hexadecimal string, calculated from the block as proof-of-work."
					},
					"prev_hash": {
						"type": "string",
						"description": "The hash of the block immediately preceding this block in the chain."
					},
					"reward": {
						"type": "integer",
						"minimum": 0,
						"description": "The amount of new [atomic units](https://www.getmonero.org/resources/moneropedia/atomic-units.html) generated in this block and rewarded to the miner. Note: 1 XMR = 1e12 [atomic units](https://www.getmonero.org/resources/moneropedia/atomic-units.html)"
					},
					"timestamp": {
						"type": "integer",
						"minimum": 0,
						"description": "The unix time at which the block was recorded into the blockchain."
					},
					"wide_cumulative_difficulty": {
						"type": "string",
						"description": "Cumulative difficulty of all blocks in the blockchain as a hexadecimal string representing a 128-bit number."
					},
					"wide_difficulty": {
						"type": "string",
						"description": "Network difficulty (analogous to the strength of the network) as a hexadecimal string representing a 128-bit number."
					}
				}
			},
			"GetLastBlockHeaderResponse": {
				"type": "object",
				"properties": {
					"block_header": {
						"type": "object",
						"$ref": "#/components/schemas/BlockHeader"
					},
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetBlockHeaderByResponse": {
				"type": "object",
				"properties": {
					"block_header": {
						"type": "object",
						"$ref": "#/components/schemas/BlockHeader"
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetBlockHeadersRangeResponse": {
				"type": "object",
				"properties": {
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"headers": {
						"type": "array",
						"description": "array of `block_header` (a structure containing block header information. See `get_last_block_header`).",
						"items": {
							"$ref": "#/components/schemas/BlockHeader"
						}
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"BlockDetails": {
				"type": "object",
				"properties": {
					"major_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The major version of the monero protocol at this block height."
					},
					"minor_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The minor version of the monero protocol at this block height."
					},
					"timestamp": {
						"type": "integer",
						"minimum": 0,
						"description": "The unix time at which the block was recorded into the blockchain."
					},
					"prev_id": {
						"type": "string",
						"description": "The hash of the block immediately preceding this block in the chain."
					},
					"nonce": {
						"type": "integer",
						"minimum": 0,
						"description": "A cryptographic random one-time number used in mining a Monero block"
					},
					"miner_tx": {
						"type": "object",
						"description": "Miner transaction information",
						"properties": {
							"version": {
								"type": "integer",
								"description": "Transaction version number."
							},
							"unlock_time": {
								"type": "integer",
								"description": "The block height when the coinbase transaction becomes spendable."
							},
							"vin": {
								"type": "array",
								"description": "List of transaction inputs.",
								"items": {
									"type": "object",
									"properties": {
										"gen": {
											"type": "object",
											"description": "Miner txs are coinbase txs, or \"gen\".",
											"properties": {
												"height": {
													"type": "integer",
													"minimum": 0,
													"description": "This block height, a.k.a. when the coinbase is generated."
												}
											}
										}
									}
								}
							},
							"vout": {
								"type": "array",
								"description": "List of transaction outputs.",
								"items": {
									"type": "object",
									"properties": {
										"target": {
											"type": "object",
											"properties": {
												"tagged_key": {
													"type": "object",
													"properties": {
														"key": {
															"type": "string",
															"description": "The public key of the output"
														},
														"view_tag": {
															"type": "string",
															"description": "The 1st byte of a shared secret in hex string (used for reducing synchronization time)"
														}
													}
												}
											}
										}
									}
								}
							},
							"extra": {
								"type": "string",
								"description": "Usually called the \"transaction ID\" but can be used to include any random 32 byte/64 character hex string."
							},
							"rct_signatures": {
								"type": "string",
								"description": "Contain signatures of tx signers. Coinbased txs do not have signatures."
							}		
						}
					},
					"tx_hashes": {
						"type": "array",
						"description": "List of hashes of non-coinbase transactions in the block. If there are no other transactions, this will be an empty list.",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"GetBlockResponse": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "Hexadecimal blob of block information."
					},
					"block_header": {
						"type": "object",
						"$ref": "#/components/schemas/BlockHeader"
					},
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"json": {
						"type": "string",
						"description": "JSON formatted block details, see `BlockDetails` component"
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			}
		}
	},
	"methods": [
		{
			"name": "get_block_count",
			"description": "Look up how many blocks are in the longest chain known to the node.",
			"params": [],
			"result": {
				"name": "GetBlockCountResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockCountResponse"
				}
			}
		},
		{
			"name": "on_get_block_hash",
			"description": "Look up a block's hash by its height.",
			"params": [
				{
					"name": "block height",
					"required": true,
					"description": "integer array of length 1 (example: `[54666]`)",
					"schema": {
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				}
			],
			"result": {
				"name": "block hash",
				"schema": {
					"type": "string"
				}
			}
		},
		{
			"name": "get_block_template",
			"description": "Get a block template on which mining a new block.",
			"params": [
				{
					"name": "wallet_address",
					"required": true,
					"description": "Address of wallet to receive coinbase transactions if block is successfully mined.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "reserve_size",
					"required": true,
					"description": "Reserve size.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "GetBlockTemplateResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockTemplateResponse"
				}
			}
		},
		{
			"name": "submit_block",
			"description": "Submit a mined block to the network.",
			"params": [
				{
					"name": "Block blob data",
					"required": true,
					"description": "list of block blobs which have been mined. See `get_block_template` to get a blob on which to mine.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"name": "status",
				"description": "Block submit status.",
				"schema": {
					"type": "string"
				}
			}
		},
		{
			"name": "generateblocks",
			"description": "Submit a mined block to the network.",
			"params": [
				{
					"name": "amount_of_blocks",
					"required": true,
					"description": "Number of blocks to be generated.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "wallet_address",
					"required": true,
					"description": "address to receive the coinbase reward.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "prev_block",
					"required": false,
					"description": "No description is provided since this field is deprecated",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "starting_nonce",
					"required": false,
					"description": "Increased by miner untill it finds a matching result that solves a block.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "GenerateBlocksResponse",
				"description": "Block submit status.",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GenerateBlocksResponse"
				}
			}
		},
		{
			"name": "generateblocks",
			"description": "Submit a mined block to the network.",
			"params": [
				{
					"name": "amount_of_blocks",
					"required": true,
					"description": "Number of blocks to be generated.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "wallet_address",
					"required": true,
					"description": "address to receive the coinbase reward.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "prev_block",
					"required": false,
					"description": "No description is provided since this field is deprecated",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "starting_nonce",
					"required": false,
					"description": "Increased by miner untill it finds a matching result that solves a block.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "GenerateBlocksResponse",
				"description": "Block submit status.",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GenerateBlocksResponse"
				}
			}
		},
		{
			"name": "get_last_block_header",
			"description": "Block header information for the most recent block is easily retrieved with this method. No inputs are needed.",
			"params": [
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetLastBlockHeaderResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetLastBlockHeaderResponse"
				}
			}
		},
		{
			"name": "get_block_header_by_hash",
			"description": "Block header information can be retrieved using either a block's hash or height. This method includes a block's hash as an input parameter to retrieve basic information about the block.",
			"params": [
				{
					"name": "hash",
					"required": true,
					"description": "The block's sha256 hash.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockHeaderByResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockHeaderByResponse"
				}
			}
		},
		{
			"name": "get_block_header_by_height",
			"description": "Similar to `get_block_header_by_hash`, this method includes a block's height as an input parameter to retrieve basic information about the block.",
			"params": [
				{
					"name": "height",
					"required": true,
					"description": "The block's height.",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockHeaderByResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockHeaderByResponse"
				}
			}
		},
		{
			"name": "get_block_headers_range",
			"description": "Similar to `get_block_header_by_height`, but for a range of blocks. This method includes a starting block height and an ending block height as parameters to retrieve basic information about the range of blocks.",
			"params": [
				{
					"name": "start_height",
					"required": true,
					"description": "The starting block's height.",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "end_height",
					"required": true,
					"description": "The ending block's height.",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockHeadersRangeResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockHeadersRangeResponse"
				}
			}
		},
		{
			"name": "get_block",
			"description": "Full block information can be retrieved by either block height or hash, like with the above block header calls. For full block information, both lookups use the same method, but with different input parameters.",
			"params": [
				{
					"name": "height",
					"required": false,
					"description": "The block's height. If not defined, `hash` field must be defined",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "end_height",
					"required": false,
					"description": "The block's hash. If not defined, `height` field must be defined",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockResponse"
				}
			}
		}
	]
}