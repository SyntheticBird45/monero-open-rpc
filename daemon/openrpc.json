{
	"openrpc": "1.2.6",
	"info": {
		"title": "Monero Daemon RPC",
		"description": "JSON-RPC API for interacting with monero daemon (Actual RPC standard is based on monerod). If authentication has been setup, user have to make sure to send the username and credentials in the `Authorization` HTTP Header",
		"license": {
			"name": "MIT License",
			"url": "https://opensource.org/licenses/mit-license.php"
		},
		"version": "v1.4.5.0",
		"x-core-rpc-version": {
			"major":3,
			"minor":13
		}
	},
	"servers": [
		{
			"url": "http://127.0.0.1:18081/json_rpc",
			"name": "Monero daemon address",
			"summary": "Address of the monero daemon to interact with"
		}
	],
	"components": {
		"tags": {
			"unrestricted": {
				"name":"Unrestricted",
				"description":"If the monero daemon have been setup to restrict its RPC endpoints, this method will still be available."
			},
			"obfuscated": {
				"name":"Obfuscated",
				"description":"If the monero daemon have been setup to restrict its RPC endpoints, this method will still be available but will obfuscate some of its fields or generally show a different behavior. This often happen when a method is necessary for the network to operate but does include by default dangerous informations for the node. Obfuscated fields are often empty strings or integers set to 0. Some methods can also just return an error based solely on the parameters"
			},
			"restricted": {
				"name":"Restricted",
				"description":"If the monero daemon have been setup to restrict its RPC endpoints, this method will not be available and will return a `method not found` error."
			}
		},
		"schemas": {
			"GetBlockCountResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"description": "Number of blocks in longest chain seen by the node."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. 'OK' means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetBlockTemplateResponse": {
				"type": "object",
				"properties": {
					"blocktemplate_blob": {
						"type": "string",
						"description": "Blob on which to try to mine a new block."
					},
					"blockhashing_blob": {
						"type": "string",
						"description": "Blob on which to try to find a valid nonce."
					},
					"difficulty": {
						"type": "integer",
						"description": "Least-significant 64 bits of the 128-bit network difficulty."
					},
					"difficulty_top64": {
						"type": "integer",
						"description": "Most-significant 64 bits of the 128-bit network difficulty."
					},
					"expected_reward": {
						"type": "integer",
						"description": "Coinbase reward expected to be received if block is successfully mined."
					},
					"height": {
						"type": "integer",
						"description": "Height on which to mine."
					},
					"next_seed_hash": {
						"type": "string",
						"description": "Hash of the next block to use as seed for Random-X proof-of-work."
					},
					"prev_hash": {
						"type": "string",
						"description": "Hash of the most recent block on which to mine the next block."
					},
					"reserved_offset": {
						"type": "integer",
						"description": "Reserved offset."
					},
					"seed_hash": {
						"type": "string",
						"description": "Hash of block to use as seed for Random-X proof-of-work."
					},
					"seed_height": {
						"type": "integer",
						"description": "Height of block to use as seed for Random-X proof-of-work."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. 'OK' means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced and thus handles the RPC locally (false)"
					},
					"wide_difficulty": {
						"type": "string",
						"description": "Network difficulty (analogous to the strength of the network) as a hexadecimal string representing a 128-bit number."
					}
				}
			},
			"GenerateBlocksResponse": {
				"type": "object",
				"properties": {
					"blocks": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "List of block hashes."
					},
					"height": {
						"type": "integer",
						"description": "Height of the most recent block."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. 'OK' means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"BlockHeader": {
				"type": "object",
				"description": "A structure containing block header information.",
				"properties": {
					"block_size": {
						"type": "integer",
						"minimum": 0,
						"description": "Backward compatibility, same as `block_weight`, use that instead",
						"deprecated": true
					},
					"block_weight": {
						"type": "integer",
						"minimum": 0,
						"description": "The adjusted block size, in bytes. This is the raw size, plus a positive adjustment for any Bulletproof transactions with more than 2 outputs."
					},
					"cumulative_difficulty": {
						"type": "integer",
						"minimum": 0,
						"description": "Least-significant 64 bits of the cumulative difficulty of all blocks up to the block in the reply."
					},
					"cumulative_difficulty_top64": {
						"type": "integer",
						"minimum": 0,
						"description": "Most-significant 64 bits of the 128-bit cumulative difficulty."
					},
					"depth": {
						"type": "integer",
						"minimum": 0,
						"description": "The number of blocks succeeding this block on the blockchain. A larger number means an older block."
					},
					"difficulty": {
						"type": "integer",
						"minimum": 0,
						"description": "The strength of the Monero network based on mining power."
					},
					"difficulty_top64": {
						"type": "integer",
						"minimum": 0,
						"description": "Most-significant 64 bits of the 128-bit network difficulty."
					},
					"hash": {
						"type": "string",
						"description": "The hash of this block."
					},
					"height": {
						"type": "integer",
						"minimum": 0,
						"description": "The number of blocks preceding this block on the blockchain."
					},
					"long_term_weight": {
						"type": "integer",
						"minimum": 0,
						"description": "The long term block weight, based on the median weight of the preceding 100000 blocks."
					},
					"major_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The major version of the monero protocol at this block height."
					},
					"miner_tx_hash": {
						"type": "string",
						"description": "The hash of this block's coinbase transaction."
					},
					"minor_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The minor version of the monero protocol at this block height."
					},
					"nonce": {
						"type": "integer",
						"minimum": 0,
						"description": "A cryptographic random one-time number used in mining a Monero block"
					},
					"num_txes": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of transactions in the block, excluding the coinbase tx."
					},
					"orphan_status": {
						"type": "boolean",
						"description": "Usually `false`. If `true`, this block is not part of the longest chain."
					},
					"pow_hash": {
						"type": "string",
						"description": "The hash, as a hexadecimal string, calculated from the block as proof-of-work."
					},
					"prev_hash": {
						"type": "string",
						"description": "The hash of the block immediately preceding this block in the chain."
					},
					"reward": {
						"type": "integer",
						"minimum": 0,
						"description": "The amount of new [atomic units](https://www.getmonero.org/resources/moneropedia/atomic-units.html) generated in this block and rewarded to the miner. Note: 1 XMR = 1e12 [atomic units](https://www.getmonero.org/resources/moneropedia/atomic-units.html)"
					},
					"timestamp": {
						"type": "integer",
						"minimum": 0,
						"description": "The unix time at which the block was recorded into the blockchain."
					},
					"wide_cumulative_difficulty": {
						"type": "string",
						"description": "Cumulative difficulty of all blocks in the blockchain as a hexadecimal string representing a 128-bit number."
					},
					"wide_difficulty": {
						"type": "string",
						"description": "Network difficulty (analogous to the strength of the network) as a hexadecimal string representing a 128-bit number."
					}
				}
			},
			"GetLastBlockHeaderResponse": {
				"type": "object",
				"properties": {
					"block_header": {
						"type": "object",
						"$ref": "#/components/schemas/BlockHeader"
					},
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetBlockHeaderByResponse": {
				"type": "object",
				"properties": {
					"block_header": {
						"type": "object",
						"$ref": "#/components/schemas/BlockHeader"
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetBlockHeadersRangeResponse": {
				"type": "object",
				"properties": {
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"headers": {
						"type": "array",
						"description": "array of `block_header` (a structure containing block header information. See `get_last_block_header`).",
						"items": {
							"$ref": "#/components/schemas/BlockHeader"
						}
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"BlockDetails": {
				"type": "object",
				"properties": {
					"major_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The major version of the monero protocol at this block height."
					},
					"minor_version": {
						"type": "integer",
						"minimum": 0,
						"description": "The minor version of the monero protocol at this block height."
					},
					"timestamp": {
						"type": "integer",
						"minimum": 0,
						"description": "The unix time at which the block was recorded into the blockchain."
					},
					"prev_id": {
						"type": "string",
						"description": "The hash of the block immediately preceding this block in the chain."
					},
					"nonce": {
						"type": "integer",
						"minimum": 0,
						"description": "A cryptographic random one-time number used in mining a Monero block"
					},
					"miner_tx": {
						"type": "object",
						"description": "Miner transaction information",
						"properties": {
							"version": {
								"type": "integer",
								"description": "Transaction version number."
							},
							"unlock_time": {
								"type": "integer",
								"description": "The block height when the coinbase transaction becomes spendable."
							},
							"vin": {
								"type": "array",
								"description": "List of transaction inputs.",
								"items": {
									"type": "object",
									"properties": {
										"gen": {
											"type": "object",
											"description": "Miner txs are coinbase txs, or \"gen\".",
											"properties": {
												"height": {
													"type": "integer",
													"minimum": 0,
													"description": "This block height, a.k.a. when the coinbase is generated."
												}
											}
										}
									}
								}
							},
							"vout": {
								"type": "array",
								"description": "List of transaction outputs.",
								"items": {
									"type": "object",
									"properties": {
										"target": {
											"type": "object",
											"properties": {
												"tagged_key": {
													"type": "object",
													"properties": {
														"key": {
															"type": "string",
															"description": "The public key of the output"
														},
														"view_tag": {
															"type": "string",
															"description": "The 1st byte of a shared secret in hex string (used for reducing synchronization time)"
														}
													}
												}
											}
										}
									}
								}
							},
							"extra": {
								"type": "string",
								"description": "Usually called the \"transaction ID\" but can be used to include any random 32 byte/64 character hex string."
							},
							"rct_signatures": {
								"type": "string",
								"description": "Contain signatures of tx signers. Coinbased txs do not have signatures."
							}		
						}
					},
					"tx_hashes": {
						"type": "array",
						"description": "List of hashes of non-coinbase transactions in the block. If there are no other transactions, this will be an empty list.",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"GetBlockResponse": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "Hexadecimal blob of block information."
					},
					"block_header": {
						"type": "object",
						"$ref": "#/components/schemas/BlockHeader"
					},
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"json": {
						"type": "string",
						"description": "JSON formatted block details, see `BlockDetails` component"
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"ConnectionInfo": {
				"type": "object",
				"properties": {
					"address": {
						"type": "string",
						"description": "The peer's address, actually IPv4|IPv6 & port."
					},
					"address_type": {
						"type":"integer",
						"minimum": 0,
						"description": "The peer's address type. `invalid = 0`, `IPv4 = 1` and `IPv6 = 2`"
					},
					"avg_download": {
						"type": "integer",
						"minimum": 0,
						"description": "Average bytes of data downloaded by node."
					},
					"avg_upload": {
						"type": "integer",
						"minimum": 0,
						"description": "Average bytes of data uploaded by node."
					},
					"connection_id": {
						"type": "string",
						"description": "The connection ID"
					},
					"current_download": {
						"type": "integer",
						"minimum": 0,
						"description": "Current bytes downloaded by node."
					},
					"current_upload": {
						"type": "integer",
						"minimum": 0,
						"description": "Current bytes uploaded by node."
					},
					"height": {
						"type": "integer",
						"minimum": 0,
						"description": "The peer height"
					},
					"host": {
						"type": "string",
						"description": "The peer host"
					},
					"incoming": {
						"type": "boolean",
						"description": "Is the node getting information from your node?"
					},
					"ip": {
						"type": "string",
						"description": "The node's IP address"
					},
					"live_time": {
						"type": "integer",
						"minimum": 0,
						"description": "The time elapsed from now to the connection with this peer"
					},
					"local_ip": {
						"type": "boolean",
						"description": "`true` if part of the node's local network, `false` otherwise"
					},
					"localhost": {
						"type": "boolean",
						"description": "`true` if localhost, `false` otherwise"
					},
					"peer_id": {
						"type": "string",
						"description": "The node's ID on the network."
					},
					"port": {
						"type": "string",
						"description": "The port that the node is using to connect to the network."
					},
					"recv_count": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					},
					"recv_idle_time": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					},
					"rpc_credits_per_hash": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					},
					"rpc_port": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					},
					"send_count": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					},
					"send_idle_time": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					},
					"state": {
						"type": "string",
						"description": "No description has been provided"
					},
					"support_flags": {
						"type": "integer",
						"minimum": 0,
						"description": "No description has been provided"
					}
				}
			},
			"GetConnectionsResponse": {
				"type": "object",
				"properties": {
					"connections": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ConnectionInfo"
						}
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetInfoResponse": {
				"type": "object",
				"properties": {
					"adjusted_time": {
						"type": "integer",
						"minimum": 0,
						"description": "Current time approximated from chain data, as Unix time."
					},
					"alt_blocks_count": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of alternative blocks to main chain."
					},
					"block_size_limit": {
						"type": "integer",
						"minimum": 0,
						"description": "Backward compatibility, same as `block_weight_limit`, use that instead"
					},
					"block_size_median": {
						"type": "integer",
						"minimum": 0,
						"description": "Backward compatibility, same as `block_weight_median`, use that instead"
					},
					"block_weight_limit": {
						"type": "integer",
						"minimum": 0,
						"description": "Maximum allowed adjusted block size based on latest 100000 blocks"
					},
					"block_weight_median": {
						"type": "integer",
						"minimum": 0,
						"description": "Median adjusted block size of latest 100000 blocks"
					},
					"bootstrap_daemon_address": {
						"type": "string",
						"description": "[Bootstrap node](https://www.getmonero.org/resources/moneropedia/bootstrap-node.html) to give immediate usability to wallets while syncing by proxying RPC to it. (Note: the replies may be untrustworthy)."
					},
					"busy_syncing": {
						"type": "boolean",
						"description": "States if new blocks are being added (`true`) or not (`false`)."
					},
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"cumulative_difficulty": {
						"type": "integer",
						"minimum": 0,
						"description": "Least-significant 64 bits of the cumulative difficulty of all blocks up to the block in the reply."
					},
					"cumulative_difficulty_top64": {
						"type": "integer",
						"minimum": 0,
						"description": "Most-significant 64 bits of the 128-bit cumulative difficulty."
					},
					"database_size": {
						"type": "integer",
						"minimum": 0,
						"description": "The size of the blockchain database, in bytes."
					},
					"difficulty": {
						"type": "integer",
						"description": "Least-significant 64 bits of the 128-bit network difficulty."
					},
					"difficulty_top64": {
						"type": "integer",
						"description": "Most-significant 64 bits of the 128-bit network difficulty."
					},
					"free_space": {
						"type": "integer",
						"minimum": 0,
						"description": "Available disk space on the node. (0 if RPC is restricted)"
					},
					"grey_peerlist_size": {
						"type": "integer",
						"minimum": 0,
						"description": "Grey Peerlist Size"
					},
					"height": {
						"type": "integer",
						"minimum": 0,
						"description": "Current length of longest chain known to daemon."
					},
					"height_without_bootstrap": {
						"type": "integer",
						"minimum": 0,
						"description": "Current length of the local chain of the daemon."
					},
					"incoming_connections_count": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of peers connected to and pulling from your node."
					},
					"mainnet": {
						"type": "boolean",
						"description": "States if the node is on the mainnet (`true`), or not (`false`)."
					},
					"nettype": {
						"type": "string",
						"descritpion":"Network type (one of `mainnet`, `stagenet` or `testnet`)"
					},
					"offline": {
						"type": "boolean",
						"description": "States if the node is offline (`true`) or online (`false`)."
					},
					"outgoing_connections_count": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of peers that you are connected to and getting information from."
					},
					"rpc_connections_count": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of RPC client connected to the daemon (Including this RPC request)."
					},
					"stagenet": {
						"type": "boolean",
						"description": "States if the node is on the stagenet (`true`), or not (`false`)."
					},
					"start_time": {
						"type": "integer",
						"minimum": 0,
						"description": "Start time of the daemon, as UNIX time."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. \"OK\" means everything looks good."
					},
					"synchronized": {
						"type": "boolean",
						"description": "States if the node is synchronized (`true`) or not (`false`)."
					},
					"target": {
						"type": "integer",
						"minimum": 0,
						"description": "Current target for next proof of work."
					},
					"target_height": {
						"type": "integer",
						"minimum": 0,
						"description": "The height of the next block in the chain."
					},
					"testnet": {
						"type": "boolean",
						"description": "States if the node is on the testnet (`true`), or not (`false`)."
					},
					"top_block_hash": {
						"type": "string",
						"description": "Hash of the highest block in the chain."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"tx_count": {
						"type": "integer",
						"minimum": 0,
						"description": "Total number of non-coinbase transaction in the chain."
					},
					"tx_pool_size": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of transactions that have been broadcast but not included in a block."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					},
					"update_available": {
						"type": "boolean",
						"description": "States if a newer Monero software version is available."
					},
					"version": {
						"type": "string",
						"description": "The version of the Monero software the node is running."
					},
					"was_bootstrap_ever_used": {
						"type": "boolean",
						"descripion":  "States if a bootstrap node has ever been used since the daemon started."
					},
					"white_peerlist_size": {
						"type": "integer",
						"minimum": 0,
						"description": "White Peerlist Size"
					},
					"wide_cumulative_difficulty": {
						"type": "string",
						"description": "Cumulative difficulty of all blocks in the blockchain as a hexadecimal string representing a 128-bit number."
					},
					"wide_difficulty": {
						"type": "string",
						"description": "Network difficulty (analogous to the strength of the network) as a hexadecimal string representing a 128-bit number."
					}
				}
			},
			"HardForkInfoResponse": {
				"type": "object",
				"properties": {
					"credits": {
						"type": "integer",
						"minimum": 0,
						"description": "If payment for RPC is enabled, the number of credits available to the requesting client. Otherwise, 0."
					},
					"earliest_height": {
						"type": "integer",
						"minimum": 0,
						"description": "Block height at which hard fork would be enabled if voted in."
					},
					"enabled": {
						"type": "boolean",
						"descripion":  "Tells if hard fork is enforced."
					},
					"state": {
						"type": "integer",
						"minimum": 0,
						"description": "Current hard fork state: 0 (There is likely a hard fork), 1 (An update is needed to fork properly), or 2 (Everything looks good)."
					},
					"status": {
						"type": "string",
						"description": "General RPC error code. \"OK\" means everything looks good."
					},
					"treshold": {
						"type": "integer",
						"minimum": 0,
						"description": "Minimum percent of votes to trigger hard fork. Default is 80."
					},
					"top_hash": {
						"type": "string",
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					},
					"version": {
						"type": "string",
						"description": "The major block version for the fork."
					},
					"votes": {
						"type": "integer",
						"minimum": 0,
						"description": "Hard fork voting status."
					},
					"window": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of blocks over which current votes are cast. Default is 10080 blocks."
					}
				}
			},
			"GetBansResponse": {
				"type":"object",
				"properties": {
					"bans": {
						"type": "array",
						"items": {
							"type":"object",
							"properties": {
								"host": {
									"type":"string",
									"description": "Host to ban (IP in A.B.C.D form - will support I2P address in the future)."
								},
								"ip": {
									"type": "integer",
									"minimum": 0,
									"description": "IP address to ban, in Int format."
								},
								"seconds": {
									"type": "integer",
									"minimum": 0,
									"description": "Number of seconds to ban node"
								}
							}
						}
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetOutputHistogramResponse": {
				"type":"object",
				"properties": {
					"credits": {
						"type":"integer",
						"minimum":0,
						"description":"If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, 0."
					},
					"histogram": {
						"type":"array",
						"items": {
							"type":"object",
							"properties": {
								"amount": {
									"type":"integer",
									"minimum":0,
									"description": "Output amount in atomic units"
								},
								"total_instances": {
									"type":"integer",
									"minimum": 0
								},
								"unlocked_instances": {
									"type":"integer",
									"minimum": 0
								},
								"recent_instances": {
									"type":"integer",
									"minimum": 0
								}
							}
						}
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"deprecated":true,
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"GetOutputCoinbaseResponse": {
				"type":"object",
				"properties": {
					"credits": {
						"type":"integer",
						"minimum":0,
						"description":"If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, 0."
					},
					"emission_amount": {
						"type":"integer",
						"minimum":0,
						"description":"Least significant 64 bits for 128 bit integer representing the sum of coinbase rewards in atomic units."
					},
					"emission_amount_top64": {
						"type":"integer",
						"minimum":0,
						"description":"Most significant 64 bits for 128 bit integer representing the sum of coinbase rewards in atomic units"
					},
					"fee_amount": {
						"type":"integer",
						"minimum":0,
						"description":"Least significant 64 bits for 128 bit integer representing the sum of fees in atomic units"
					},
					"fee_amount_top64": {
						"type":"integer",
						"minimum":0,
						"description":"Most significant 64 bits for 128 bit integer representing the sum of fees in atomic units"
					},
					"status": {
						"type": "string",
						"description": " General RPC error code. \"OK\" means everything looks good."
					},
					"top_hash": {
						"type": "string",
						"deprecated":true,
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					},
					"wide_emission_amount": {
						"type": "string",
						"description": "string (128 bit hex encoded integer); Sum of coinbase rewards in atomic units"
					},
					"wide_fee_amount": {
						"type": "string",
						"description": "string (128 bit hex encoded integer); Sum of fees in atomic units"
					}
				}
			},
			"GetVersionResponse": {
				"type":"object",
				"properties": {
					"current_height": {
						"type":"integer",
						"minimum": 0,
						"description":"Current blockchain's height"
					},
					"hard_forks": {
						"type":"array",
						"description":"List of network hard forks with their heights",
						"items":{
							"type":"object",
							"properties": {
								"height": {
									"type":"integer",
									"description":"Height at which the hard fork is enabled by consensus",
									"minimum":0
								},
								"hf_version": {
									"type":"integer",
									"description":"Version of the hard fork",
									"minimum":0
								}
							}
						}
					},
					"release": {
						"type":"boolean",
						"description":"States if the daemon software version corresponds to an official tagged release (`true`), or not (`false`)"
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description":"States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					},
					"version": {
						"type":"integer",
						"description":"Indicate the version of the core RPC module. It is defined as follow: `((major)<<16)|(minor)`",
						"minimum":0
					}
				}
			},
			"GetFeeEstimateResponse": {
				"type":"object",
				"properties": {
					"credits": {
						"type":"integer",
						"minimum":0,
						"description":"If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, 0."
					},
					"fee": {
						"type":"integer",
						"minimum": 0,
						"description":"Amount of fees estimated per byte in atomic units"
					},
					"fees": {
						"type":"array",
						"description":"Represents the base fees at different priorities [slow, normal, fast, fastest].",
						"items": {
							"type":"integer",
							"minimum": 0
						}
					},
					"quantization_mask": {
						"type":"integer",
						"description":"Final fee should be rounded up to an even multiple of this value",
						"minimum": 0
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description":"States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					},
					"version": {
						"type":"integer",
						"description":"Indicate the version of the core RPC module. It is defined as follow: `((major)<<16)|(minor)`",
						"minimum":0
					}
				}
			},
			"GetAlternateChainsResponse": {
				"type":"object",
				"properties": {
					"chains": {
						"type":"array",
						"description":"Array of alternative chain entries",
						"items": {
							"type":"object",
							"description":"An alternative chain information structure",
							"properties": {
								"block_hash": {
									"type":"string",
									"description":"the block hash of the first diverging block of this alternative chain."
								},
								"block_hashes": {
									"type":"array",
									"description":"An array of all block hashes in the alternative chain that are not in the main chain.",
									"items": {
										"type":"string"
									}
								},
								"difficulty": {
									"type": "integer",
									"minimum": 0,
									"description": "Least-significant 64 bits of 128-bit integer for the cumulative difficulty of all blocks in the alternative chain."
								},
								"difficulty_top64": {
									"type": "integer",
									"minimum": 0,
									"description": "Most-significant 64 bits of 128-bit integer for the cumulative difficulty of all blocks in the alternative chain."
								},
								"height": {
									"type":"integer",
									"minimum": 0,
									"description":"The block height of the first diverging block of this alternative chain."
								},
								"length": {
									"type":"integer",
									"minimum": 0,
									"description":"the length in blocks of this alternative chain, after divergence."
								},
								"main_chain_parent_block": {
									"type":"string",
									"description":"The hash of the greatest height block that is shared between the alternative chain and the main chain."
								},
								"wide_difficulty": {
									"type":"string",
									"description":"The hash of the greatest height block that is shared between the alternative chain and the main chain."
								}
							}
						}
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description":"States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
					}
				}
			},
			"SyncInfoResponse": {
				"type":"object",
				"properties": {
					"credits": {
						"type":"integer",
						"minimum":0,
						"description":"If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, 0."
					},
					"height": {
						"type":"integer",
						"minimum":0,
						"description":"Daemon's current height. In bootstrap configuration, this field do not return the bootstrap daemon's height"
					},
					"next_needed_pruning_seed": {
						"type":"integer",
						"minimum":0,
						"description":"The next pruning seed needed for pruned sync. This integer is contained between `=0` and the number of pruning strip (as of Monero v0.18.3.1, `8`)"
					},
					"overview": {
						"type":"string",
						"description": "Overview of current block queue where each character in the string represents a block set in the queue. `. = requested but not received`, `o = set received`, `m  = received set that matches the next blocks needed`"
					},
					"peers": {
						"type":"array",
						"description":"array of peer structure",
						"items": {
							"type":"object",
							"properties": {
								"info": {
									"$ref":"#/components/schemas/ConnectionInfo"
								}
							}
						}
					},
					"spans": {
						"type":"array",
						"description":"array of span structure",
						"items": {
							"type":"object",
							"properties": {
								"connection_id": {
									"type":"string",
									"description":"Id of connection"
								},
								"nblocks": {
									"type":"integer",
									"minimum":0,
									"description":"Number of blocks in that span"
								},
								"rate": {
									"type":"integer",
									"minimum":0,
									"description":"Connection rate"
								},
								"remote_address": {
									"type":"string",
									"description":"peer address the node is downloading (or has downloaded) than span from"
								},
								"size": {
									"type":"integer",
									"minimum": 0,
									"description": "Total number of bytes in that span's blocks (including txes)"
								},
								"speed": {
									"tpye":"integer",
									"minimum": 0,
									"description": "Connection speed"
								},
								"start_block_height": {
									"type":"integer",
									"minimum": 0,
									"description": "Block height of the first block in that span"
								}
							}
						}
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"target_height": {
						"type":"integer",
						"minimum": 0,
						"description": "Target height the node is aiming for (will be 0 if node is fully synced)"
					},
					"top_hash": {
						"type": "string",
						"deprecated":true,
						"description": "If payment for RPC is enabled, the hash of the highest block in the chain. Otherwise, empty. (Warning, payment for RPC is deprecated)"
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`). Note: This field always return false since the `sync_info` never call the bootstrap daemon"
					}
				}
			},
			"GetTxPoolBackLogResponse": {
				"type":"object",
				"description": "This response is sent in binary form. IT IS NOT JSON",
				"properties": {
					"backlog": {
						"type":"array",
						"description": "array of structures tx_backlog_entry (in binary form)",
						"items": {
							"type":"object",
							"properties": {
								"blob_size": {
									"type":"integer",
									"minimum": 0
								},
								"fee": {
									"type":"integer",
									"minimum": 0
								},
								"time_in_pool": {
									"type":"integer",
									"minimum": 0
								}
							}
						}
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`). Note: This field always return false since the `sync_info` never call the bootstrap daemon"
					}
				}
			},
			"GetOutputDistributionResponse": {
				"type":"object",
				"properties": {
					"distributions": {
						"type":"array",
						"items": {
							"type":"object",
							"properties": {
								"amount": {
									"type":"integer",
									"minimum": 0
								},
								"base": {
									"type":"integer",
									"minimum": 0
								},
								"distribution": {
									"type":"array",
									"items": {
										"type":"integer",
										"minimum": 0
									}
								},
								"start_height": {
									"type":"integer",
									"minimum": 0
								}
							}
						}
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					}
				}
			},
			"GetMinerDataResponse": {
				"type":"object",
				"properties": {
					"major_version": {
						"type":"integer",
						"minimum":0,
						"description":"Block's major fork version"
					},
					"height": {
						"type":"integer",
						"minimum":0,
						"description":"Block's height"
					},
					"prev_id": {
						"type":"string",
						"description":"Parent block's hash"
					},
					"seed_hash": {
						"type":"string",
						"description":"RandomX seed hash"
					},
					"difficulty": {
						"type":"integer",
						"minimum":0,
						"description":"Network difficulty"
					},
					"median_weight": {
						"type":"integer",
						"minimum":0,
						"description":"Median blocks weight"
					},
					"already_generated_coins": {
						"type":"integer",
						"minimum":0,
						"description":"Coins mined by the network so far."
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"tx_backlog": {
						"type":"array",
						"description":"array of mineable mempool transactions.",
						"items": {
							"type":"object",
							"properties":{
								"id": {
									"type":"string"
								},
								"weight": {
									"type":"integer",
									"minimum":0
								},
								"fee": {
									"type":"integer",
									"minimum":0
								}
							}
						}
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`). Note: This field always return false since the `sync_info` never call the bootstrap daemon"
					}
				}
			},
			"PruneBlockchainResponse": {
				"type":"object",
				"properties": {
					"pruned": {
						"type":"boolean"
					},
					"pruning_seed": {
						"type":"integer",
						"minimum": 0,
						"description":"Block's height at which pruning began."
					},
					"status": {
						"type":"string",
						"description":"General RPC error code. \"OK\" means everything looks good."
					},
					"untrusted": {
						"type": "boolean",
						"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`). Note: This field always return false since the `sync_info` never call the bootstrap daemon"
					}
				}
			},
			"AddAuxiliaryPOWResponse": {
				"type":"object",
				"properties": {
					"blocktemplate_blob":{
						"type":"string",
						"description":"Altered block template blob data in hex string format"
					},
					"blockhashing_blob":{
						"type":"string",
						"description":"Altered block template hash blob in hex string format"
					},
					"merkle_root": {
						"type":"string",
						"description":"No description has been provided and the author is scared of the meaning"
					},
					"merkle_tree_depth": {
						"type":"integer",
						"minimum":0,
						"description":"No description has been provided and the author is scared of the meaning"
					},
					"aux_pow": {
						"type":"array",
						"items": {
							"type":"object",
							"properties": {
								"id": {
									"type":"string"
								},
								"hash": {
									"type":"string"
								}
							}
						}
					}
				}
			}
		}
	},
	"methods": [
		{
			"name": "get_block_count",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Look up how many blocks are in the longest chain known to the node.",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name": "GetBlockCountResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockCountResponse"
				}
			}
		},
		{
			"name": "on_get_block_hash",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Look up a block's hash by its height.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "block height",
					"required": true,
					"description": "integer array of length 1 (example: `[54666]`)",
					"schema": {
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				}
			],
			"result": {
				"name": "OnGetBlockHashResult",
				"schema": {
					"type": "string"
				}
			}
		},
		{
			"name": "get_block_template",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Get a block template on which mining a new block.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "wallet_address",
					"required": true,
					"description": "Address of wallet to receive coinbase transactions if block is successfully mined.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "reserve_size",
					"required": true,
					"description": "Reserve size.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "GetBlockTemplateResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/GetBlockTemplateResponse"
				}
			}
		},
		{
			"name": "submit_block",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Submit a mined block to the network.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "Block blob data",
					"required": true,
					"description": "list of block blobs which have been mined. See `get_block_template` to get a blob on which to mine.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"name": "status",
				"description": "Block submit status.",
				"schema": {
					"type": "string"
				}
			}
		},
		{
			"name": "generateblocks",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Generate a block and specify the address to receive the coinbase reward.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "amount_of_blocks",
					"required": true,
					"description": "Number of blocks to be generated.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "wallet_address",
					"required": true,
					"description": "address to receive the coinbase reward.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "prev_block",
					"required": false,
					"description": "No description is provided since this field is deprecated",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "starting_nonce",
					"required": false,
					"description": "Increased by miner untill it finds a matching result that solves a block.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "GenerateBlocksResponse",
				"description": "Block submit status.",
				"schema": {
					"$ref": "#/components/schemas/GenerateBlocksResponse"
				}
			}
		},
		{
			"name": "get_last_block_header",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Block header information for the most recent block is easily retrieved with this method. No inputs are needed.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetLastBlockHeaderResponse",
				"schema": {
					"$ref": "#/components/schemas/GetLastBlockHeaderResponse"
				}
			}
		},
		{
			"name": "get_block_header_by_hash",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Block header information can be retrieved using either a block's hash or height. This method includes a block's hash as an input parameter to retrieve basic information about the block.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "hash",
					"required": true,
					"description": "The block's sha256 hash.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockHeaderByResponse",
				"schema": {
					"$ref": "#/components/schemas/GetBlockHeaderByResponse"
				}
			}
		},
		{
			"name": "get_block_header_by_height",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Similar to `get_block_header_by_hash`, this method includes a block's height as an input parameter to retrieve basic information about the block.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "height",
					"required": true,
					"description": "The block's height.",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockHeaderByResponse",
				"schema": {
					"$ref": "#/components/schemas/GetBlockHeaderByResponse"
				}
			}
		},
		{
			"name": "get_block_headers_range",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Similar to `get_block_header_by_height`, but for a range of blocks. This method includes a starting block height and an ending block height as parameters to retrieve basic information about the range of blocks.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "start_height",
					"required": true,
					"description": "The starting block's height.",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "end_height",
					"required": true,
					"description": "The ending block's height.",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockHeadersRangeResponse",
				"schema": {
					"$ref": "#/components/schemas/GetBlockHeadersRangeResponse"
				}
			}
		},
		{
			"name": "get_block",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Full block information can be retrieved by either block height or hash, like with the above block header calls. For full block information, both lookups use the same method, but with different input parameters.",
			"paramStructure":"by-name",
			"params": [
				{
					"name": "height",
					"required": false,
					"description": "The block's height. If not defined, `hash` field must be defined",
					"schema": {
						"type": "integer",
						"minimum": 0
					}
				},
				{
					"name": "end_height",
					"required": false,
					"description": "The block's hash. If not defined, `height` field must be defined",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "fill_pow_hash",
					"required": false,
					"description": "(Optional; defaults to `false`) Add PoW hash to block_header response.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "GetBlockResponse",
				"schema": {
					"$ref": "#/components/schemas/GetBlockResponse"
				}
			}
		},
		{
			"name": "get_connections",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Retrieve information about incoming and outgoing connections to your node. (Warning: This method is unavailable if the node have set restricted RPC)",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name": "GetConnectionsResponse",
				"schema": {
					"$ref": "#/components/schemas/GetConnectionsResponse"
				}
			}
		},
		{
			"name": "get_info",
			"tags": [
				{
					"$ref":"#/components/tags/obfuscated"
				}
			],
			"description": "Retrieve general information about the state of your node and the network.",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name": "GetInfoResponse",
				"schema": {
					"$ref": "#/components/schemas/GetInfoResponse"
				}
			}
		},
		{
			"name": "hard_fork_info",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Look up information regarding hard fork voting and readiness.",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name": "HardForkInfoResponse",
				"schema": {
					"type": "object",
					"$ref": "#/components/schemas/HardForkInfoResponse"
				}
			}
		},
		{
			"name": "set_bans",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Ban another node by IP.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"bans",
					"required": true,
					"description": "A list of nodes to ban.",
					"schema": {
						"type": "array",
						"items": {
							"type":"object",
							"properties": {
								"host": {
									"type":"string",
									"description": "Host to ban (IP in A.B.C.D form - will support I2P address in the future)."
								},
								"ip": {
									"type": "integer",
									"minimum": 0,
									"description": "IP address to ban, in Int format."
								},
								"ban": {
									"type": "boolean",
									"description": "Set `true` to ban."
								},
								"seconds": {
									"type": "integer",
									"minimum": 0,
									"description": "Number of seconds to ban node"
								}
							}
						}
					}
				}
			],
			"result": {
				"name": "SetBansResponse",
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string",
							"description": "General RPC error code. \"OK\" means everything looks good."
						},
						"untrusted": {
							"type": "boolean",
							"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (true), or when the daemon is fully synced and thus handles the RPC locally (false)"
						}
					}
				}
			},
			"examples": [
				{
					"name": "banning by host",
					"description": "In the following example, host is banned with its IP address string-formatted as A.B.C.D:",
					"params": [
						{
							"name":"host",
							"value": "192.168.1.51"
						},
						{
							"name": "ban",
							"value": true
						},
						{
							"name": "seconds",
							"value": 30
						}
					],
					"result": {
						"name": "ResultExample",
						"value": {
							"status": "OK",
							"untrusted": false
						}
					}
				},
				{
					"name": "banning by ip",
					"description": "In the following example, integer-formatted IP is banned:",
					"params": [
						{
							"name":"ip",
							"value": 838969536
						},
						{
							"name": "ban",
							"value": true
						},
						{
							"name": "seconds",
							"value": 30
						}
					],
					"result": {
						"name": "ResultExample",
						"value": {
							"status": "OK",
							"untrusted": false
						}
					}
				}			  
			]
		},
		{
			"name": "get_bans",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Get list of banned IPs.",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name":"GetBansResult",
				"description": "List of banned nodes",
				"schema": {
					"$ref": "#/components/schemas/GetBansResponse"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "ResultExample",
						"value": {
							"bans": [
								{
									"host": "102.168.1.51",
									"ip": 855746662,
									"seconds": 22
							  	},
								{
									"host": "192.168.1.50",
									"ip": 838969536,
									"seconds": 28
							  	}
							],
							"status": "OK",
							"untrusted": false
						}
					}
				}				  
			]
		},
		{
			"name": "banned",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Check if an IP address is banned and for how long.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"address",
					"required": true,
					"description":"IP address to check in string format.",
					"schema": {
						"type":"string"
					}
				}
			],
			"result": {
				"name":"bans",
				"description": "List of banned nodes",
				"schema": {
					"type":"object",
					"properties": {
						"banned": {
							"type": "boolean",
							"description": "`true` if banned, `false` otherwise"
						},
						"status": {
							"type": "string",
							"description": "General RPC error code. 'OK' means everything looks good."
						},
						"seconds": {
							"type": "integer",
							"minimum": 0,
							"description": "No description has been provided"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Banned example",
					"description": "Check if 1.1.1.1 is banned and for how long.",
					"params": [
						{
							"name": "address",
							"value": "1.1.1.1"
						}
					],
					"result": {
						"name": "ExampleIsBanned",
						"value": {
							"banned": false,
							"status": "OK",
							"seconds": 0
						}
					}
				}
			]
		},
		{
			"name": "flush_txpool",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Flush tx ids from transaction pool",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"txids",
					"required": false,
					"description":"Optional, list of transactions IDs to flush from pool (all tx ids flushed if empty).",
					"schema": {
						"type":"array",
						"items": {
							"type":"string"
						}
					}
				}
			],
			"result": {
				"name":"status",
				"description": "General RPC error code. 'OK' means everything looks good.",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name":"Example",
					"description":"Example of flushing the txpool from tx with id \"dc16fa8eaffe1484ca9014ea050e13131d3acf23b419f33bb4cc0b32b6c49308\"",
					"params": [
						{
							"name":"txids",
							"value": [
								"dc16fa8eaffe1484ca9014ea050e13131d3acf23b419f33bb4cc0b32b6c49308",
								""
							]
						}
					],
					"result": {
						"name":"ResultExample",
						"value": {
							"status": "OK"
						}
					}
				}
			]
		},
		{
			"name": "get_output_histogram",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Get a histogram of output amounts. For all amounts (possibly filtered by parameters), gives the number of outputs on the chain for that amount. RingCT outputs counts as 0 amount.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"amounts",
					"required": true,
					"description":"List of amounts to get entries from",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"min_count",
					"required": false,
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"max_count",
					"required": false,
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"unlocked",
					"required": false,
					"schema": {
						"type":"boolean",
						"minimum":0
					}
				},
				{
					"name":"recent_cutoff",
					"required": false,
					"schema": {
						"type":"integer",
						"minimum":0
					}
				}
			],
			"result": {
				"name":"GetOutputHistogramResult",
				"schema": {
					"$ref": "#/components/schemas/GetOutputHistogramResponse"
				}
			},
			"examples": [
				{
					"name":"Example",
					"description":"Request an histogram of all outputs with an amount of 20000000000 atomic units",
					"params": [
						{
							"name":"amounts",
							"value": [20000000000]
						}
					],
					"result": {
						"name": "ResultExample",
						"value": {
							"credits": 0,
							"histogram": [
								{
									"amount": 20000000000,
									"recent_instances": 0,
									"total_instances": 381477,
									"unlocked_instances": 0
								}
							],
							"status": "OK",
							"top_hash": "",
							"untrusted": false
						}
					}
				}
			]
		},
		{
			"name": "get_coinbase_tx_sum",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Get the coinbase amount and the fees amount for n last blocks starting at particular height",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"height",
					"required": true,
					"description":"Block height from which getting the amounts",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"count",
					"required": true,
					"description":"Number of blocks to include in the sum",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				}
			],
			"result": {
				"name":"GetOutputCoinbaseResult",
				"schema": {
					"$ref": "#/components/schemas/GetOutputCoinbaseResponse"
				}
			},
			"examples": [
				{
					"name":"Example",
					"description":"Request to the node the coinbase transaction sum of height 1563078, including the second last block",
					"params": [
						{
							"name":"height",
							"value": 1563078
						},
						{
							"name":"count",
							"value": 2
						}
					],
					"result": {
						"name": "ResultExample",
						"value": {
							"credits": 0,
    						"emission_amount": 9471836197320,
    						"emission_amount_top64": 0,
    						"fee_amount": 0,
    						"fee_amount_top64": 0,
    						"status": "OK",
    						"top_hash": "",
    						"untrusted": false,
    						"wide_emission_amount": "0x89d556e91c8",
    						"wide_fee_amount": "0x0"
						}
					}
				}
			]
		},
		{
			"name": "get_version",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "This method originally served at indicating the version of the monero node. It also now indicate current height and all hard fork's height",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name":"GetVersionResult",
				"schema": {
					"$ref": "#/components/schemas/GetVersionResponse"
				}
			},
			"examples": [
				{
					"name":"Monero v0.18.3.1",
					"description":"Request actual node version, blockchain's height and hard forks informations. (from Monero v0.18.3.1)",
					"params": [],
					"result": {
						"name": "ResultExample",
						"value": {
							"current_height": 3093596,
    						"hard_forks": [{
    						  "height": 1,
    						  "hf_version": 1
    						},
							{
    						  "height": 1009827,
    						  "hf_version": 2
    						},
							{
    						  "height": 1141317,
    						  "hf_version": 3
    						},
							{
    						  "height": 1220516,
    						  "hf_version": 4
    						},
							{
    						  "height": 1288616,
    						  "hf_version": 5
    						},
							{
    						  "height": 1400000,
    						  "hf_version": 6
    						},
							{
    						  "height": 1546000,
    						  "hf_version": 7
    						},
							{
    						  "height": 1685555,
    						  "hf_version": 8
    						},
							{
    						  "height": 1686275,
    						  "hf_version": 9
    						},
							{
    						  "height": 1788000,
    						  "hf_version": 10
    						},
							{
    						  "height": 1788720,
    						  "hf_version": 11
    						},
							{
    						  "height": 1978433,
    						  "hf_version": 12
    						},
							{
    						  "height": 2210000,
    						  "hf_version": 13
    						},
							{
    						  "height": 2210720,
    						  "hf_version": 14
    						},
							{
    						  "height": 2688888,
    						  "hf_version": 15
    						},
							{
    						  "height": 2689608,
    						  "hf_version": 16
    						}],
    						"release": true,
    						"status": "OK",
    						"untrusted": true,
    						"version": 196621
						}
					}
				}
			]
		},
		{
			"name": "get_fee_estimate",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Gives an estimation on fees per byte.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"grace_blocks",
					"description":"No description has been provided",
					"required":false,
					"schema": {
						"type":"integer",
						"minimum":0
					}
				}
			],
			"result": {
				"name":"GetFeeEstimateResult",
				"schema": {
					"$ref": "#/components/schemas/GetFeeEstimateResponse"
				}
			},
			"examples": [
				{
					"name":"Request fees",
					"description":"Request the current fee estimates",
					"params": [],
					"result": {
						"name": "ResultExample",
						"value": {
							"credits": 0,
    						"fee": 20000,
    						"fees": [20000,80000,320000,4000000],
    						"quantization_mask": 10000,
    						"status": "OK",
    						"top_hash": "",
    						"untrusted": true
						}
					}
				}
			]
		},
		{
			"name": "get_alternate_chains",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Returns all alternative chains seen by the node.",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name":"GetAlternateChainsResult",
				"schema": {
					"$ref": "#/components/schemas/GetAlternateChainsResponse"
				}
			},
			"examples": [
				{
					"name":"Get alternatives chains",
					"description":"This example provide a response containing a subset of alternatives chains seen by a 27 day old monero daemon. The node had seen 35 alternative chains",
					"params": [],
					"result": {
						"name": "SubsetExample",
						"value": {
							"chains": [{
								"block_hash": "eb9d4981d76aa79aec973f48cf208413efd4203d6c43305717bc1f613d580ffc",
								"block_hashes": ["eb9d4981d76aa79aec973f48cf208413efd4203d6c43305717bc1f613d580ffc"],
								"difficulty": 336511215954680339,
								"difficulty_top64": 0,
								"height": 3084604,
								"length": 1,
								"main_chain_parent_block": "9ffea9b494efa4230b99b87a77e8dcd8965e94e429641c019fa5a171d940d0cd",
								"wide_difficulty": "0x4ab872b01e9da13"
							  },{
								"block_hash": "70e5eb1ac35e8c4b53565ec5dd2e8aa20092ed0dc55590aef38fd2af2abf81df",
								"block_hashes": ["70e5eb1ac35e8c4b53565ec5dd2e8aa20092ed0dc55590aef38fd2af2abf81df"],
								"difficulty": 335337050449101510,
								"difficulty_top64": 0,
								"height": 3080211,
								"length": 1,
								"main_chain_parent_block": "d55cad99dfef16f32ca3c5844736587edd9a80fb757788a62817b7f82258c1d4",
								"wide_difficulty": "0x4a75b454c0bc2c6"
							  },{
								"block_hash": "2bc54f02130bf7dc18806cb16c25f16569157f1d8a7d26b4eb70a12f0bad3cdf",
								"block_hashes": ["2bc54f02130bf7dc18806cb16c25f16569157f1d8a7d26b4eb70a12f0bad3cdf"],
								"difficulty": 337698982822081011,
								"difficulty_top64": 0,
								"height": 3088986,
								"length": 1,
								"main_chain_parent_block": "fd94a8a65b5f8510a54523785efa6a00adb0cdae8a2f5113c199c82d1168ddc1",
								"wide_difficulty": "0x4afbf6f881ef1f3"
							  }],
							  "status": "OK",
							  "untrusted": false
						}
					}
				}
			]
		},
		{
			"name": "relay_tx",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Relay a list of transaction IDs.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"txids",
					"required": true,
					"description":"List of transactions IDs to relay",
					"schema": {
						"type":"array",
						"items": {
							"type":"string"
						}
					}
				}
			],
			"result": {
				"name":"status",
				"description": "General RPC error code. 'OK' means everything looks good.",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name":"Example",
					"description":"Example of requesting the relay of a tx with id \"9fd75c429cbe52da9a52f2ffc5fbd107fe7fd2099c0d8de274dc8a67e0c98613\"",
					"params": [
						{
							"name":"txids",
							"value": [
								"9fd75c429cbe52da9a52f2ffc5fbd107fe7fd2099c0d8de274dc8a67e0c98613",
								""
							]
						}
					],
					"result": {
						"name":"ResultExample",
						"value": {
							"status": "OK"
						}
					}
				}
			]
		},
		{
			"name": "sync_info",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Returns node's synchronisation informations. Also contains p2p and general networking informations",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name":"SyncInfoResult",
				"schema": {
					"$ref": "#/components/schemas/SyncInfoResponse"
				}
			},
			"examples": [
				{
					"name":"Get synchronization information",
					"description":"This example provide a response containing a subset of syncing informations. Ip addresses have been modified (Monero v0.18.3.1, ~11:30 AM UTC 02/28/2024)",
					"params": [],
					"result": {
						"name": "SubsetExample",
						"value": {
							"credits": 0,
    						"height": 1384668,
    						"next_needed_pruning_seed": 4,
    						"overview": "[.ooo.o.oo.o..]",
    						"peers": [{
    						  "info": {
    						    "address": "152.61.2.52:18080",
    						    "address_type": 1,
    						    "avg_download": 0,
    						    "avg_upload": 0,
    						    "connection_id": "65998ac9f03d4f59bb81584cc64b5a98",
    						    "current_download": 0,
    						    "current_upload": 0,
    						    "height": 0,
    						    "host": "152.61.2.52",
    						    "incoming": false,
    						    "ip": "152.61.2.52",
    						    "live_time": 2,
    						    "local_ip": false,
    						    "localhost": false,
    						    "peer_id": "0000000000000000",
    						    "port": "18080",
    						    "pruning_seed": 0,
    						    "recv_count": 0,
    						    "recv_idle_time": 2,
    						    "rpc_credits_per_hash": 0,
    						    "rpc_port": 0,
    						    "send_count": 313,
    						    "send_idle_time": 2,
    						    "state": "before_handshake",
    						    "support_flags": 0
    						  }
    						},{
    						  "info": {
    						    "address": "25.179.1.191:18080",
    						    "address_type": 1,
    						    "avg_download": 1615,
    						    "avg_upload": 0,
    						    "connection_id": "f0a00db48a8e414bb2ad821769ff201a",
    						    "current_download": 1793,
    						    "current_upload": 0,
    						    "height": 3094017,
    						    "host": "25.179.1.191",
    						    "incoming": false,
    						    "ip": "25.179.1.191",
    						    "live_time": 10,
    						    "local_ip": false,
    						    "localhost": false,
    						    "peer_id": "24c5be19606d9534",
    						    "port": "18080",
    						    "pruning_seed": 0,
    						    "recv_count": 16545334,
    						    "recv_idle_time": 0,
    						    "rpc_credits_per_hash": 0,
    						    "rpc_port": 0,
    						    "send_count": 4141,
    						    "send_idle_time": 3,
    						    "state": "synchronizing",
    						    "support_flags": 1
    						  }
    						}],
							"spans": [{
								"connection_id": "0e88815546984f0bbcd67ff12346361b",
								"nblocks": 20,
								"rate": 0,
								"remote_address": "43.100.106.18:18080",
								"size": 0,
								"speed": 100,
								"start_block_height": 1384668
							  },{
								"connection_id": "0aa8595254374b908534dd40fd26d57d",
								"nblocks": 20,
								"rate": 373948,
								"remote_address": "5.190.52.177:18080",
								"size": 3164992,
								"speed": 11,
								"start_block_height": 1384688
							}],
							"status": "OK",
    						"target_height": 3094017,
    						"top_hash": "",
    						"untrusted": false
						}
					}
				}
			]
		},
		{
			"name": "get_txpool_backlog",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Returns all transaction pool backlog in binary format. **IT ISN'T VALID JSON**",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name":"GetTxPoolBackLogResult",
				"schema": {
					"$ref": "#/components/schemas/GetTxPoolBackLogResponse"
				}
			}
		},
		{
			"name": "get_output_distribution",
			"tags": [
				{
					"$ref":"#/components/tags/obfuscated"
				}
			],
			"description": "Collect informations about an output distribution. Restricted RPC can only get output distribution for RingCT outputs.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"amounts",
					"required": false,
					"description":"An array of amounts to look for",
					"schema": {
						"type":"array",
						"items": {
							"type":"integer",
							"minimum":0
						}
					}
				},
				{
					"name":"cumulative",
					"required": false,
					"description":"States if the result should be cumulative (`true`) or not (`false`) (default is `false`)",
					"schema": {
						"type":"boolean"
					}
				},
				{
					"name":"from_height",
					"required": false,
					"description":"Starting height to check from (default is 0)",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"to_height",
					"required": false,
					"description":"Ending height to check up to (default is 0)",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"binary",
					"required": false,
					"description":"States if the result should be sent in binary form (using `epee` encoding) (default is `true`)",
					"schema": {
						"type":"boolean"
					}
				},
				{
					"name":"compress",
					"required": false,
					"description":"States if the result should be compressed, only useful if the `binary` field is set to `true` (default is `true`)",
					"schema": {
						"type":"boolean"
					}
				}
			],
			"result": {
				"name":"GetOutputDistributionResult",
				"schema": {
					"$ref":"#/components/schemas/GetOutputDistributionResponse"
				}
			},
			"examples": [
				{
					"name":"Amount 628780000",
					"description":"Example of requesting distribution of the outputs with an amount of 628780000. **WARNING!** the `distribution` field is way bigger than what is presented in the example's result. It is why it can be sent in binary/compressed form",
					"params": [
						{
							"name":"ExampleRequest",
							"value": {
								"amounts":[628780000],
								"from_height":1462078,
								"binary":false
							}
						}
					],
					"result": {
						"name":"DistributionResult",
						"value": {
							"credits": 0,
    						"distributions": [{
    							"amount": 628780000,
    							"base": 0,
    							"binary": false,
    							"compress": false,
    							"distribution": [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
							}],
							"start_height": 1462078,
							"status": "OK",
    						"top_hash": "",
    						"untrusted": true
						}
					}
				}
			]
		},
		{
			"name": "get_miner_data",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Provide the necessary data to create a custom block template. They are used by p2pool.",
			"paramStructure":"by-name",
			"params": [],
			"result": {
				"name":"GetMinerDataResult",
				"schema": {
					"$ref":"#/components/schemas/GetMinerDataResponse"
				}
			},
			"examples": [
				{
					"name":"Requesting block template",
					"description":"Example of requesting necessary data for p2pool to operate",
					"params": [],
					"result": {
						"name":"BlockTemplateResult",
						"value": {
							"already_generated_coins": 18403687239336866969,
    						"difficulty": "0x386d6e1a28",
    						"height": 3094152,
    						"major_version": 16,
    						"median_weight": 300000,
    						"prev_id": "4436dc6bd2421d7ed13df37412f55bafeaf5624f744fe33fe9c8544eff8773a4",
    						"seed_hash": "3981f50fa207c5e2f9fa45fe104e80dc9e9f7538f4b2a2efccaeb7856cedf616",
    						"status": "OK",
    						"tx_backlog": [{
    						  "fee": 30640000,
    						  "id": "63beffdc6a17a6c98e7bade9e171636e1d84ae237d31fec01729a9f5d95fd908",
    						  "weight": 1532
    						},
							{
    						  "fee": 44480000,
    						  "id": "45d31ab8f18e8b9f4cc7f26de2ec0535baf7e18f9cbecb2a5e7923e887733b28",
    						  "weight": 2224
    						},
							{
    						  "fee": 72460000,
    						  "id": "7666f1368ad4e31d84fd898af0d55c010a0d92b280cb1f8347dd4134d62ada39",
    						  "weight": 3601
    						},
							{
    						  "fee": 30660000,
    						  "id": "fd5dd1a5c04c0982394452ac57bfbd84379c88447af1fa7b08104597c0fa2d81",
    						  "weight": 1533
    						}],
    						"untrusted": false
						}
					}
				}
			]
		},
		{
			"name": "prune_blockchain",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Can enable blockchain pruning on the node or simply check its state. **WARNING!** Checking the pruning state requires checking accross all transactions. It is I/O consuming and the node is likely to hang on during a long period of time, depending on your hardware",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"check",
					"required":false,
					"description":"If set to true then pruning status is checked instead of initiating pruning. (`false` by default).",
					"schema": {
						"type":"boolean"
					}
				}
			],
			"result": {
				"name":"PruneBlockchainResult",
				"schema": {
					"$ref":"#/components/schemas/PruneBlockchainResponse"
				}
			},
			"examples": [
				{
					"name":"Checking pruning state",
					"description":"Example of requesting the pruning state of a node",
					"params": [
						{
							"name":"check",
							"value": true
						}
					],
					"result": {
						"name":"CheckPruneResult",
						"value": {
							"pruned": true,
    						"pruning_seed": 387,
    						"status": "OK",
    						"untrusted": false
						}
					}
				}
			]
		},
		{
			"name": "calc_pow",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Calculate PoW hash for a block candidate.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"major_version",
					"required":true,
					"description":"The major version of the monero protocol at this block height.",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"height",
					"required":true,
					"description":"The height of the block candidate",
					"schema": {
						"type":"integer",
						"minimum":0
					}
				},
				{
					"name":"block_blob",
					"required":true,
					"description":"Block blobdata in an hex string",
					"schema": {
						"type":"string"
					}
				},
				{
					"name":"seed_hash",
					"required":true,
					"description":"The major version of the monero protocol at this block height.",
					"schema": {
						"type":"string"
					}
				}
			],
			"result": {
				"name":"POWResult",
				"schema": {
					"type":"string"
				}
			},
			"examples": [
				{
					"name":"Requesting POW calculation",
					"params": [
						{
							"name":"major_version",
							"value": 14
						},
						{
							"name":"height",
							"value": 2286447
						},
						{
							"name":"block_blob",
							"value":"0e0ed286da8006ecdc1aab3033cf1716c52f13f9d8ae0051615a2453643de94643b550d543becd0000000002abc78b0101ffefc68b0101fcfcf0d4b422025014bb4a1eade6622fd781cb1063381cad396efa69719b41aa28b4fce8c7ad4b5f019ce1dc670456b24a5e03c2d9058a2df10fec779e2579753b1847b74ee644f16b023c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051399a1bc46a846474f5b33db24eae173a26393b976054ee14f9feefe99925233802867097564c9db7a36af5bb5ed33ab46e63092bd8d32cef121608c3258edd55562812e21cc7e3ac73045745a72f7d74581d9a0849d6f30e8b2923171253e864f4e9ddea3acb5bc755f1c4a878130a70c26297540bc0b7a57affb6b35c1f03d8dbd54ece8457531f8cba15bb74516779c01193e212050423020e45aa2c15dcb"
						},
						{
							"name":"seed_hash",
							"value":"d432f499205150873b2572b5f033c9c6e4b7c6f3394bd2dd93822cd7085e7307"
						}
					],
					"result": {
						"name":"CalcPOWExampleResult",
						"value": "d0402d6834e26fb94a9ce38c6424d27d2069896a9b8b1ce685d79936bca6e0a8"
					}
				}
			]
		},
		{
			"name": "flush_cache",
			"tags": [
				{
					"$ref":"#/components/tags/restricted"
				}
			],
			"description": "Flush bad transactions / blocks from the cache.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"bad_txs",
					"required":false,
					"description":"Flush bad transactions (default is `false`)",
					"schema": {
						"type":"boolean"
					}
				},
				{
					"name":"bad_blocks",
					"required":false,
					"description":"Flush bad blocks (default is `false`)",
					"schema": {
						"type":"boolean"
					}
				}
			],
			"result": {
				"name":"FlushCacheResult",
				"schema": {
					"type":"object",
					"properties": {
						"status": {
							"type":"string",
							"description": " General RPC error code. \"OK\" means everything looks good."
						},
						"untrusted": {
							"type":"boolean",
							"description": "States if the result is obtained using the bootstrap mode, and is therefore not trusted (`true`), or when the daemon is fully synced and thus handles the RPC locally (`false`)"
						}
					}
				}
			},
			"examples": [
				{
					"name":"Requesting POW calculation",
					"params": [
						{
							"name":"bad_txs",
							"value": true
						},
						{
							"name":"bad_blocks",
							"value": true
						}
					],
					"result": {
						"name":"FlushingExampleResult",
						"value": {
							"status": "OK",
    						"untrusted": false
						}
					}
				}
			]
		},
		{
			"name": "add_aux_pow",
			"tags": [
				{
					"$ref":"#/components/tags/unrestricted"
				}
			],
			"description": "Easily enable merge mining with Monero without requiring software that manually alters the extra field in the coinbase tx to include the merkle root of the aux blocks.",
			"paramStructure":"by-name",
			"params": [
				{
					"name":"blocktemplate_blob",
					"required":true,
					"description":"Block template's blobdata in hex string format",
					"schema": {
						"type":"string"
					}
				},
				{
					"name":"aux_pow",
					"required":true,
					"description":"Auxiliary block informations to add to the coinbase tx's extra field",
					"schema": {
						"type":"array",
						"items": {
							"type":"object",
							"properties":{
								"id": {
									"type":"string"
								},
								"hash":{
									"type":"string"
								}
							}
						}
					}
				}
			],
			"result": {
				"name":"AddAuxiliaryPOWResult",
				"schema": {
					"$ref":"#/components/schemas/AddAuxiliaryPOWResponse"
				}
			},
			"examples": [
				{
					"name":"Requesting POW calculation",
					"params": [
						{
							"name":"blocktemplate_blob",
							"value": "..."
						},
						{
							"name":"aux_pow",
							"value": [
								{
									"id":"3200b4ea97c3b2081cd4190b58e49572b2319fed00d030ad51809dff06b5d8c8",
									"hash":"7b35762de164b20885e15dbe656b1138db06bb402fa1796f5765a23933d8859a"
								}
							]
						}
					],
					"result": {
						"name":"AddAuxPOWExampleResult",
						"value": {
							"aux_pow": [{
								"hash": "7b35762de164b20885e15dbe656b1138db06bb402fa1796f5765a23933d8859a",
								"id": "3200b4ea97c3b2081cd4190b58e49572b2319fed00d030ad51809dff06b5d8c8"
							}],
							"blockhashing_blob": "1010ee97e2a106e9f8ebe8887e5b609949ac8ea6143e560ed13552b110cb009b21f0cfca1eaccf00000000b2685c1283a646bc9020c758daa443be145b7370ce5a6efacb3e614117032e2c22",
							"blocktemplate_blob": " ... ",
							"merkle_root": "7b35762de164b20885e15dbe656b1138db06bb402fa1796f5765a23933d8859a",
							"merkle_tree_depth": 0,
							"status": "OK",
							"untrusted": false
						}
					}
				}
			]
		}
	]
}